<!-- ##### SECTION Title ##### -->
gnome-program

<!-- ##### SECTION Short_Description ##### -->
Initialize and retrieve information about a GNOME application.

<!-- ##### SECTION Long_Description ##### -->
<para>

</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### ENUM GnomeFileDomain ##### -->
<para>
Many of the files that a GNOME application needs to access will be installed in
standard locations. For example, GNOME help files will be in one location,
while help files specific to the current application might be in another
location.
</para>
<para>
The different types of files are given in this enum. User applications make use
of the <structfield>GNOME_FILE_DOMAIN_APP_*</structfield> types, which specify
locations relative to #GNOME_PARAM_APP_DATADIR.
</para>

@GNOME_FILE_DOMAIN_UNKNOWN: 
@GNOME_FILE_DOMAIN_LIBDIR: 
@GNOME_FILE_DOMAIN_DATADIR: 
@GNOME_FILE_DOMAIN_SOUND: 
@GNOME_FILE_DOMAIN_PIXMAP: 
@GNOME_FILE_DOMAIN_CONFIG: 
@GNOME_FILE_DOMAIN_HELP: 
@GNOME_FILE_DOMAIN_APP_LIBDIR: 
@GNOME_FILE_DOMAIN_APP_DATADIR: 
@GNOME_FILE_DOMAIN_APP_SOUND: 
@GNOME_FILE_DOMAIN_APP_PIXMAP: 
@GNOME_FILE_DOMAIN_APP_CONFIG: 
@GNOME_FILE_DOMAIN_APP_HELP: 

<!-- ##### STRUCT GnomeProgram ##### -->
<para>

</para>

@object: 
@_priv: 

<!-- ##### STRUCT GnomeModuleInfo ##### -->
<para>

</para>

@name: 
@version: 
@description: 
@requirements: 
@instance_init: 
@pre_args_parse: 
@post_args_parse: 
@options: 
@init_pass: 
@class_init: 
@opt_prefix: 
@expansion1: 

<!-- ##### STRUCT GnomeModuleRequirement ##### -->
<para>

</para>

@required_version: 
@module_info: 

<!-- ##### USER_FUNCTION GnomeModuleInitHook ##### -->
<para>

</para>

@mod_info: 


<!-- ##### USER_FUNCTION GnomeModuleClassInitHook ##### -->
<para>

</para>

@klass: 
@mod_info: 


<!-- ##### USER_FUNCTION GnomeModuleHook ##### -->
<para>

</para>

@program: 
@mod_info: 


<!-- ##### FUNCTION gnome_program_init ##### -->
<para>
Every GNOME application will need to call this function (or
gnome_program_initv()) early in its lifetime to initialize the various GNOME
libraries in a consistent fashion. This function is very flexible in allowing
the user to specify which modules should be initialised and any special
paramter values that should be passed to these modules (along with processing
commandline options).
</para>
<para>
It loads the specified @module_info, which is normally #LIBGNOME_MODULE or
#LIBGNOMEUI_MODULE and pulls in all the dependencies.  Programs that are not
running in setuid or setgid mode will also load modules specified in the
<parameter class="option">--load-modules</parameter> and also in the <parameter
class="option">GNOME_MODULES</parameter> environment variable.
</para>
<para>
After setting up the module loading, this function then calls (in order)
gnome_program_preinit(), gnome_program_parse_args() and
gnome_program_postinit().
</para>
<para>The following example shows how one might initialise a typical program
using a popt table that is defined elsewhere (in other words, this is how to
remove the use of the deprecated gnome_init_with_popt_table() from code).
</para>
<example>
<title>Initializing a GNOME application</title>
<programlisting>
int main(int argc, char **argv) {
	GnomeProgram *my_app;
	
	/* We assume PACKAGE and VERSION are set the program name and version
	 * number respectively. Also, assume the 'options' is a global array of
	 * poptOptions.
	 */
	my_app = gnome_program_init(PACKAGE, VERSION, LIBGNOMEUI_MODULE,
	                            argc, argv, GNOME_PARAM_POPT_TABLE, options,
				    NULL);
	/* Now process any extra args, etc ... */
}
</programlisting>
</example>

@app_id: 
@app_version: 
@module_info: 
@argc: 
@argv: 
@first_property_name: 
@Varargs: 
@Returns: 


<!-- ##### FUNCTION gnome_program_initv ##### -->
<para>

</para>

@type: 
@app_id: 
@app_version: 
@module_info: 
@argc: 
@argv: 
@first_property_name: 
@args: 
@Returns: 


<!-- ##### MACRO GNOME_PROGRAM_STANDARD_PROPERTIES ##### -->
<para>

</para>



<!-- ##### FUNCTION gnome_program_get ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gnome_program_get_human_readable_name ##### -->
<para>

</para>

@program: 
@Returns: 


<!-- ##### FUNCTION gnome_program_get_app_id ##### -->
<para>

</para>

@program: 
@Returns: 


<!-- ##### FUNCTION gnome_program_get_app_version ##### -->
<para>

</para>

@program: 
@Returns: 


<!-- ##### FUNCTION gnome_program_locate_file ##### -->
<para>

</para>

@program: 
@domain: 
@file_name: 
@only_if_exists: 
@ret_locations: 
@Returns: 


<!-- ##### MACRO GNOME_PARAM_POPT_TABLE ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_POPT_FLAGS ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_POPT_CONTEXT ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_CREATE_DIRECTORIES ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_ENABLE_SOUND ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_ESPEAKER ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_APP_ID ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_APP_VERSION ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_GNOME_PREFIX ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_GNOME_SYSCONFDIR ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_GNOME_DATADIR ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_GNOME_LIBDIR ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_APP_PREFIX ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_APP_SYSCONFDIR ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_APP_DATADIR ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_APP_LIBDIR ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_HUMAN_READABLE_NAME ##### -->
<para>

</para>



<!-- ##### MACRO GNOME_PARAM_GNOME_PATH ##### -->
<para>

</para>



<!-- ##### FUNCTION gnome_program_module_register ##### -->
<para>

</para>

@module_info: 


<!-- ##### FUNCTION gnome_program_module_registered ##### -->
<para>

</para>

@module_info: 
@Returns: 


<!-- ##### FUNCTION gnome_program_module_load ##### -->
<para>

</para>

@mod_name: 
@Returns: 


<!-- ##### FUNCTION gnome_program_install_property ##### -->
<para>

</para>

@pclass: 
@get_fn: 
@set_fn: 
@pspec: 
@Returns: 


<!-- ##### FUNCTION gnome_program_preinit ##### -->
<para>

</para>

@program: 
@app_id: 
@app_version: 
@argc: 
@argv: 
@Returns: 


<!-- ##### FUNCTION gnome_program_parse_args ##### -->
<para>

</para>

@program: 


<!-- ##### FUNCTION gnome_program_postinit ##### -->
<para>

</para>

@program: 


